<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="logo.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAB
        1wAAAdcBjJIIaAAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAA1cSURBVHhe5VoJ
        cFRFGv77vZlMZnJOJiHHJCTkPoBkSEg4EhLIxaEQWAgh3IRrVwWR1QWWxaNEQS4BQUCUioLKfbPciVSx
        HquuKLoHuta6FssW4rpgXIWZ+bf+nsNJvxmGIUMx7v5VX82b917/f39fd//dr98D8I8xAOgGAJMBYAkA
        vAYABwHgBABsBYCVADARAKLFgj9lkwCgEgCaJca+AgAkqCTJEh8eciPdEGHuGmewJoSH3NDIsoWuMQAL
        Y+w0AJSLzgLVHrC34CwAGAQAVQAwDgDWSIxdJFIhQWpzbWYyzqsowq2ja/Hk1OF4etoIBTaNqMSJhTkY
        E6I1czEYHAKAeDFgoFmLo2VdoZYlS2lKAj5aWYLHptQ5SZ5oGoZHJg7Gg+NrcF/jANzTUI67G/rhrtH9
        cHdDOe5rrMA9jZU4vTgXg1Uqs8TYPwCgSAwaSNZSEB+De8YPwQ3DB+DaoeXYXF+NJ5p+bOWTU+vwyISB
        uLexP+4aXXbLWD2oCGNDtRaJsf8EsghcACK6p6ECD4ytwkPja/Hw+Fo8OK7GZ9IiXqrrRSJY1ZJ0OVCH
        g1MAsfL+wqqBhahVyVaZsSNi8ECwk11jDVYSwDaWlQT8gQn5XRz5JeBmhy0GXfANEoC6v1hxf+G1kX0x
        WqdBmTFKugFl8xgD686xg/F401CezcXKe8KO+lIcmduZt654zR1G5XVGxhitFwxiJe6mdabFyzhTNs8D
        B8dVKyruDs0jemNBfBTv1hJj+Hj/7op7RDxTY3IMgwliJe62baPV3fq6/niqaTifz8XKO0Ctfl9xJsaE
        BKMmSI3PPDges5LjMUqnwSXVBYr7XbFzdBlqZIkEeEaswN22SImxzyODNeYVQ8rw+JR7FZVfVmPC0V2T
        0RgRwluxICsFP3h9GVrf24GfHliLxpgo1KhkHJGbhJuGlijKOxAfpqXy28QKBIKlS4ydp3xA06Ip3oA5
        MREYH67jxGxLW4Z98rNw38pH0PLudk7ega9aXsKGmj58ODAAjAnVYm6nCOweG4kze2Y4Bcg0hJOv42Lw
        QDEtAJzXR4RhVZ9CrOmVj2MHleGcsUPwlScfwEsnXmhH2h3+enAdPvVAI064pxyrS7qjPjwE8zpFOAVI
        sPWAfWLgQLKWipICxAtvKMjdDioK85wCUA4IVslWAFgtBg0ku2MCLK12zgKTxKCBYMkA8BQAXBYFoHFf
        WpCtICfC3X0kQFiQGodmJ2JNWjzlB+oBCWLwu20pssSuBKlkS6hWg6IARKrMlKMgLMLdfSQA+dSoVbz1
        ZcZoByngbI1GrbJ8tGUhlhdkKARwh5kjqznE8yJIAPL5SfNvMFitotan7bSAsyOmjCSL5fRztywAESOI
        50U4BCDfpvRE2ik6IAYPBHuWuv+5FxdgbXEuFnbNtAuwU0HIVwEKc1K5z/NbFiLFAICnxeCBYEmSxL5R
        q2RLuC4Y42OibAL8YbeCkAO/GFXLIZ4XEWeIRPJJ5GVJou2xgN01TgKAdQDwISWrz06/htYPDygI+YK/
        7FvjmPbes7e8O/LT7Fvrtwsq71dLZIxZlz4yE/GTYwpSGxfOwKqSbu1A58T7CLQilBijxJcoBnGxFn24
        Bqv6JPkMKmff1PWvMcaOGiLDzVc/OKIYBjTu9UFBOCA+loOO3eWCb840Y4w+HFWyfMzFdRwA/BIAtru0
        4NcVxYmIf5rlM6gclXfxtYf2N+xxOmTdGWPmaaPvQfzj8XbExgzsi53DQvHquHoOOqZzogBNdQNQkvjm
        B71NIpsiS6yNHrZykrXmysIIrCqKQH2YihPhpN4f7BMqigy8PPkhf9mdtWbyL0lAu9AdHhqP0fhd8vAM
        tH50yEns0Jr5/KmQiBPo+PCa+e3IU9e3j/1H7b7odZp1ZIXB+uXuQsQzvZ2oMIV3SID+poh2/r7YVYjD
        y6Jo2FH8qQInn4xJktRMjqgn/PutH6dEIlxf3ZvDlTx1e2p5vkskSVvs7xNjqeWriyKsltbe+PHLBTh9
        aCxWF/m3B5A/8vvJKwVobu1FwlolxntCrEjMFyMCC2kfr5MhEpfMbcILB9cpuvuF/Wt5q9OYtye9X9vL
        ks0lQf68zYTnm/NRq5EsssyuMoA3FDnADcmbgQRw5AAG0Ep+dcGShUSgWPZe8IjA6basNUit4t2dnMZF
        67EwNx17ZKfyed6xWRKk4uv9VqHsrjRjsJm6Z9OQTkiVFF6QtHRQANdZIEEls2vUEyhecpyGVp6UGDts
        LZTpvzjyPK6dVY/T7y3Fe3p345hxbyk+N7se/7b9Sb7kdTMtHS3MCrFQhaibyjK8LVzvqADtBFfJ7N2B
        JZFcgG6pOkrCR12v+2JGABgCAAsA4KJjqqM1vSfYBaA3ylSGypKPdREhsvn66V64YLyR3hhTq4y2v3on
        85cA5K+B/C+alIjfnyrBUK1MsTa4cHJrVDAPAMbSbi1j7KQsq76xjx+qMHZJ6HRj/fxpXgVYP6cB040x
        zqFiT4b8u4FXF2Xg1aPFWJwTyv/LEvsSABbTyrODAnxEfuz+sCQ31HLtWDE2L0h31IEawq3lAMBmWZac
        Hz7IsgqTUkxYXDoJ68asxDhjrmKRI5J2B+oJneLzcODwFWgqmYSRUUkYplPje5u7I80E2x/PxEG9Iq2y
        xBNmh2YBu5jWwb0ireSX/L+zqRslW7Msw5suydhpGgBYTjszuuAgC21eNj9xP9/mTs0qw6Wb2jiWbGrD
        1MwyLO+Rg9azL6H1zCa0tKxXkHUHEiA5rQx/vewqx+xFFzAsIhY1agl/XhfLK0hj9NK+IhqnWN7TeFsC
        lBdGYfc0Hf5zfxH3R35nDotFlcwsksQ+c7cE18oya6VufV99LV4+/aKzZSsKc7BLRhk+tvoaLlp5DRcu
        v4YZOQOxICNZQdAb8tOTMSN3kFMAAgkSEaLF4CDbzlBmkg4fnZxIXRbzs6MttyNAfmY4L09+aKbhQ47B
        D/aHukiRPK3xd0sSs25dPMtGnPb2z27hLSu2GqGoz3QM1YXg98dXK0h6At0bqtNhUd/pCgEoxpUDy3Dz
        w2NxQI9M6rpcjBCtGq+fvx/x/SEKkp7ww9sDUatxvK+g75LgFC233RK323i6ecVDE23k3361XZd2J8Co
        Sa/zAAcWz1QQ9YT9i2fwMvVTdrgVwPXev+9cjPMaa/j9RzcPQ/xgmIKoJxxe09OR5Ggj1+smqyxL0ufF
        eekW/kbnnfbkPQkwb8lXGBWdinldErHt6CoFWRHf/nYV5qQYMSo6DecvueJVAMKNU2sxIzEGK3snIZ4b
        pSDqCZQAgzUyZX5ZJOvO6FM33LVsri2Tv7FBURF3AhAamnYjYxIOLyu4qQhEvq40HyVJxjHT9in8eBKA
        sOGhMbw1Nz9RpiDqDpsWdnO0fpNI1JM9rVapLN+efQUtb72sqMDNBCDU1i3nIuR2SeRd3DUn0DGdo5an
        e2qHL1eU9yYA9YKqwmzUBMm4Z2VvBWFX7FrWA4PUEqpUbL9I8ma2IyslwczH/pkXFBXwJgChYeoe3rVJ
        eUqMlOkJITodP0fXxkzdqyh3KwIQ/nVoORqjI2kRZX1wbBp+3VrdjviVlmqc3ZjCX76qVfwrk3CR5M3s
        VKnJ9sbG0up+LvcmAIHGNSU3yvA0zRF69p3Bz4ljXoQ3AQhl3bjA31JW1wXL1spiA1aVRCP96rSyVZYZ
        TXUrAEAtEvRm/GHGtpJb5wy4ce4YDjrul+9dgI6AC5BvE+D5OQ0cogB03f4wlQ0Anzqe9emX/gNAmkjs
        Vs1FgPat7miV9EQj5plGKiruL+QWjMSMJKMirgcBbHU2hTt3jdw8ZfpkNxXg9xt/xcdxTd0yRcX9heqh
        S3mMdzfO8yhAv+78Acaxyfm10APo/KsAUCGSuxXzKEBuchymGuMxNCwWH37yoqLi/gL5phhpifE8pihA
        6+o5qJIlNHaKMqclRHOxOsdFt9t+N8ZEme1vl30WwaMAFEir0+PkWa2KSvsbk2e1oFZr20ESBWis6skJ
        t7VuxhH9Cvjxd29ua/ckSv8TYvSUCH3+xsijAProVP60Jlb2ToFiUUxRABr/VEfL2S22eoWHtGv95xfY
        9iPontvJBx4FcM38g0euwS4Z/e8IyLcjjrspMSAEoGO9Xo+VlVV+BfkU43gTQNyIceCOC1BeXoHXr6Nf
        QT4VcbwIcNd6gDcB1q3boGhhwrPPrlXc+38hQF5eV57VZ8+eo7i3IwL8ZIZATU0tH+MXL15WXHPgdgQI
        2B7gir17D/LWX7lyteKaK/4nBfjuuxuYm5uHWVnZ2NZ2XXHdVwEcix9aCP2s3OR2IdT2u62OhdAOkaA3
        87sAy5ev4q2/f/9hxTUR3gSgJ1LH8pcIOo6TYulx+MdeYCdP1+jJ0KfPY/wqwKVLV9BgMOCAAZWKa+7g
        TQBbl/ftMxlfP4/xqwBz5sxFlUqF5859rLjmDrcigK+fydg/j7k7AmzY8ILXxOcKnwRwsw/oDm5ejd/U
        WhxZtbIwywl9mA6DtZHO9Tod36mlsCJOmK5dPZxDoIQegb1DH672SYCOfosXqLilJPhf37ei4uzbuTsA
        AAAASUVORK5CYII=
</value>
  </data>
</root>